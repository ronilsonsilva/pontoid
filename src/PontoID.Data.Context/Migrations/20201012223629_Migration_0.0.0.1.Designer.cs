// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PontoID.Infra.Data.Repository;

namespace PontoID.Data.Context.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20201012223629_Migration_0.0.0.1")]
    partial class Migration_0001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PontoID.Domain.Entities.Aluno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Atualizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2020, 10, 12, 19, 36, 28, 440, DateTimeKind.Local).AddTicks(2800));

                    b.Property<DateTime>("Cadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2020, 10, 12, 19, 36, 28, 429, DateTimeKind.Local).AddTicks(7322));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("PontoID.Domain.Entities.AlunoTurma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Atualizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2020, 10, 12, 19, 36, 28, 540, DateTimeKind.Local).AddTicks(6424));

                    b.Property<DateTime>("Cadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2020, 10, 12, 19, 36, 28, 540, DateTimeKind.Local).AddTicks(5654));

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("TurmaId");

                    b.ToTable("AlunoTurma");
                });

            modelBuilder.Entity("PontoID.Domain.Entities.Escola", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Atualizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2020, 10, 12, 19, 36, 28, 503, DateTimeKind.Local).AddTicks(1186));

                    b.Property<DateTime>("Cadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2020, 10, 12, 19, 36, 28, 502, DateTimeKind.Local).AddTicks(7369));

                    b.Property<long>("CodigoINEP")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Escola");
                });

            modelBuilder.Entity("PontoID.Domain.Entities.Turma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Atualizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2020, 10, 12, 19, 36, 28, 532, DateTimeKind.Local).AddTicks(4403));

                    b.Property<DateTime>("Cadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2020, 10, 12, 19, 36, 28, 532, DateTimeKind.Local).AddTicks(3066));

                    b.Property<string>("Descricao")
                        .HasColumnType("character varying(4096)")
                        .HasMaxLength(4096);

                    b.Property<Guid>("EscolaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<byte>("Turno")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId");

                    b.ToTable("Turma");
                });

            modelBuilder.Entity("PontoID.Domain.Entities.AlunoTurma", b =>
                {
                    b.HasOne("PontoID.Domain.Entities.Aluno", "Aluno")
                        .WithMany("Turmas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoID.Domain.Entities.Turma", "Turma")
                        .WithMany("Alunos")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PontoID.Domain.Entities.Turma", b =>
                {
                    b.HasOne("PontoID.Domain.Entities.Escola", "Escola")
                        .WithMany("Turmas")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
